Python简介
==========

1. Python定义
-------------

Python
是一种简单易学并且结合了\ **解释性、编译性、互动性和面向对象的脚本语言**\ 。Python提供了高级数据结构，它的语法和动态类型以及解释性使它成为广大开发者的首选编程语言。

-  **Python 是解释型语言：**
   开发过程中没有了编译这个环节。类似于PHP和Perl语言。

-  **Python 是交互式语言：** 可以在一个 Python 提示符 >>>
   后直接执行代码。

-  **Python 是面向对象语言:**
   Python支持面向对象的风格或代码封装在对象的编程技术。

Python的创始人为Guido van
Rossum。1989年，Guido为了打发圣诞节的无趣，决心开发一个新的脚本解释程序，做为ABC
语言的一种继承。

2. Python发展史
---------------

.. _python发展史-1:

2.1 Python发展史
~~~~~~~~~~~~~~~~

1. **1980年代末**\ ：

   -  Guido van Rossum在荷兰阿姆斯特丹的CWI（Centrum Wiskunde &
      Informatica）工作，开始设计Python语言，灵感来自于ABC语言和其他语言如C、Unix
      shell。

2. **1991年**\ ：

   -  Python第一个版本（0.9.0）发布，包含了很多现代Python的基本特性，如异常处理、函数、模块、以及一些内置数据类型。

3. **1994年**\ ：

   -  Python 1.0发布，增加了lambda、map、filter、reduce等功能。

4. **2000年**\ ：

   -  Python 2.0发布，引入了列表解析、垃圾回收机制、以及Unicode支持。

5. **2008年**\ ：

   -  Python
      3.0发布，这是一个不向后兼容的版本，引入了许多改进，如print函数、整数除法、文本和数据的更明确区分等。

2.2 主要版本
~~~~~~~~~~~~

1. **Python 1.x 系列**\ ：

   -  **Python
      1.0**\ （1994年）：引入了模块、异常、函数、以及核心数据类型如列表和字典。
   -  **Python
      1.5**\ （1998年）：引入了许多新特性，包括嵌套作用域和标准库的扩展。

2. **Python 2.x 系列**\ ：

   -  **Python
      2.0**\ （2000年）：引入了垃圾回收机制、列表解析、Unicode支持等。
   -  **Python
      2.7**\ （2010年）：作为2.x系列的最后一个主要版本，增加了一些3.x的特性，如新格式化字符串语法（\ ``str.format``\ ）和字典理解（dictionary
      comprehensions）。

3. **Python 3.x 系列**\ ：

   -  **Python
      3.0**\ （2008年）：这是一个不向后兼容的版本，引入了许多改进和新特性，如print函数、整数除法、更明确的文本和数据区分、以及重新设计的标准库。
   -  **Python
      3.6**\ （2016年）：引入了格式化字符串字面值（f-strings）、异步生成器和异步推导式。
   -  **Python
      3.7**\ （2018年）：引入了数据类（dataclasses）、上下文变量、改进的模块导入机制等。
   -  **Python 3.8**\ （2019年）：引入了赋值表达式（walrus operator
      ``:=``\ ）、位置仅参数等。
   -  **Python 3.9**\ （2020年）：引入了字典合并运算符（\ ``|`` 和
      ``|=``\ ）、类型提示的改进等。
   -  **Python 3.10**\ （2021年）：引入了结构模式匹配（Structural
      Pattern Matching）、改进的错误消息等。
   -  **Python
      3.11**\ （2022年）：引入了新的性能优化、改进的错误处理等。

2.3 Python2.0与Python3.0的区别
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

+-------+--------------------------------------+-----------------------+
| **类  | **Python 2.0**                       | **Python 3.0**        |
| 别**  |                                      |                       |
+=======+======================================+=======================+
| 输出  | 使用\ ``print``\ 关键字              | 使用\ ``pr            |
| 方面  | 进行输出，例如：\ ``print "Hello"``  | int()``\ 函数，例如： |
|       |                                      | \ ``print("Hello")``  |
+-------+--------------------------------------+-----------------------+
| 输入  | 使用\                                | 使用\                 |
| 方面  |  ``raw_input()``\ 函数，例如：\ ``na | ``input()``\ 函数，例 |
|       | me = raw_input("请输入你的名字：")`` | 如：\ ``name = input( |
|       |                                      | "请输入你的名字：")`` |
+-------+--------------------------------------+-----------------------+
| 字符  | 默认                                 | 默认采用Unicod        |
| 串的  | 采用ASCII编码对输入的字符串进行编码  | e编码对字符串进行编码 |
| 编码  |                                      |                       |
| 格式  |                                      |                       |
+-------+--------------------------------------+-----------------------+
| 格    | 用\ ``%                              | 兼                    |
| 式化  | ``\ 占位符进行标准化格式输出字符串， | 容2.0的语法外，还可以 |
| 字符  | 例如：“\ ``Hello, %s" % ("World")``  | 用\ ``format()``\ 函  |
| 串的  |                                      | 数，例如：“\ ``Hello, |
| 方式  |                                      |  {}.format("World")`` |
+-------+--------------------------------------+-----------------------+
| 源文  | 默认采用ASCII                        | 默认采用utf-8         |
| 件的  | ，因此使用中文时要在源文件开头加上一 |                       |
| 编码  | 行注释：\ ``# -- coding: utf-8 --``  |                       |
| 格式  |                                      |                       |
+-------+--------------------------------------+-----------------------+
| 数据  | 有整型\ ``int``\ 、长整型\ ``long``  | 只有整型\ ``int``     |
| 类型  |                                      |                       |
+-------+--------------------------------------+-----------------------+
| 代码  | 源码不规范，重复代码很多             | 源码精简，美观、优雅  |
| 规范  |                                      |                       |
+-------+--------------------------------------+-----------------------+

3. Python的特点
---------------

-  **简单易读易学**\ ：Python是非常简单的语言，并且具有清晰的风格和强制缩进，Python具有简单的语法，极其容易入门。
-  **免费其开源**\ ：Python是自由/开放源码的软件。可以自行对其源代码进行修改使用。
-  **可移植性**\ ：Python可以被移植在许多平台上，常用的平台包括Linux、Windows、VxWorks、PlayStation、Windows
   CE、PocketPC等。
-  **解释性**\ ：
   Python解释器把源代码转换成字节码，然后再把它翻译成计算机使用的机器语言并运行，即Python代码在运行之前不需要编译。
-  **面向对象**\ ：Python支持面向对象的编程。程序通过组合（composition）与继承（inheritance）的方式定义类（class）。
-  **可扩展性**\ ：如果需要一段关键代码运行得更快或者希望某些算法不公开，那么可以将部分程序用C或C++进行编写，然后在Python程序中调用。
-  **可嵌入性**\ ：可以把Python嵌入C/C++程序，从而向程序用户提供脚本功能。
-  **交互式命令行**\ ：python可以单步直译运行，可以在一个 Python 提示符
   >>> 后直接执行代码。
-  **丰富的标准库**\ ：Python标准库包括字符串处理（字典、数组切片、正则表达式re）、文档生成、多线程、串行化、数据库、HTML/XML解析（BeautifulSoup，Expat）、单元测试（PyUnit）、代码版本控制（PySVN）、WAV文件、网络控制（urllib2）、密码系统、GUI（图形用户界面，PyQt）、图形模块（Tkinter、PyTCL、WxPython）等。除了标准库以外，还有许多其他高质量的库，如wxPython、Twisted和Python图像库等等。
-  **规范性**\ ：采用强制缩进的方式使得代码具有较好可读性，减少了视觉上的错乱。
-  **胶水语言**\ ：python经常用作将不同语言编写的程序“粘”在一起的胶水语言。Boost.Python使得Python和C++的类库可互相调用（.pyc）；Jpython是用Java实现的Python，可以同时使用两者的类库；Ironpython是Python在.NET平台上的版本。

4. Python编译和运行过程
-----------------------

首先将Python源代码编译生成Python字节码，然后再由Python虚拟机来执行Python字节码，最后在终端输出运行结果。

以下是简要说明：

1. **源代码**\ ：编写Python源代码（.py文件）。
2. **编译**\ ：Python解释器将源代码编译成字节码（Python Byte
   Code，扩展名一般为.pyc文件）。
3. **解释**\ ：Python虚拟机（Python Virtual
   Machine，简称PVM）读取字节码并逐行解释执行。
4. **执行**\ ：最终运行代码，执行相应的操作，比如终端输出。

.. figure::
   C:\Users\xsdwl\AppData\Roaming\Typora\typora-user-images\image-20240525222444834.png
   :alt: image-20240525222444834

   image-20240525222444834

..

   注意：

   Python是一种解释型语言，指的是解释\ **Python字节码**\ ，而不是\ **Python源代码**\ 。这种机制的基本思想与Java和.NET是一致的。

4.1 Python解释器
~~~~~~~~~~~~~~~~

**Python解释器（*Interpreter*）**\ 是把Python语言翻译成计算机 CPU
能听懂的机器指令。

首先可以在命令提示行输入\ **python –version**\ 来查看python的版本：

.. code:: bash

   $ python --version
   Python 3.10.8

然后在命令提示符中输入”Python”命令来启动Python解释器：

.. code:: bash

   $ python
   Python 3.10.8 (tags/v3.10.8:aaaf517, Oct 11 2022, 16:50:30) [MSC v.1933 64 bit (AMD64)] on win32
   Type "help", "copyright", "credits" or "license" for more information.
   >>>

Python解释器由多个组件构成，这些组件共同合作，实现Python代码的解析、编译和执行。以下是Python解释器的主要组件：

1. **词法分析器（Lexer/Tokenizer）**\ ：

   -  **功能**\ ：将源代码转换为标记（token）序列，这些标记是编程语言的基本组成部分，如关键字、变量名、操作符等。
   -  **工作原理**\ ：扫描源代码的字符流，将其分割成有意义的标记，供语法分析器使用。

2. **语法分析器（Parser）**\ ：

   -  **功能**\ ：将标记序列转换为抽象语法树（AST），表示代码的结构和语法。
   -  **工作原理**\ ：根据语言的语法规则，解析标记序列，构建出反映代码层次关系的树状结构。

3. **语义分析器（Semantic Analyzer）**\ ：

   -  **功能**\ ：检查AST的语义正确性，确保变量、类型和操作符的使用符合语言规则。
   -  **工作原理**\ ：执行类型检查、作用域解析等任务，以验证代码的逻辑正确性。

4. **编译器（Compiler）**\ ：

   -  **功能**\ ：将AST转换为字节码（bytecode）。
   -  **工作原理**\ ：将高层次的语言结构翻译成低层次的指令序列，便于虚拟机执行。

5. **字节码**\ ：

   -  **简介**\ ：一种中间表示形式，介于源代码和机器码之间。
   -  **特点**\ ：字节码是跨平台的，可移植的，与特定的硬件无关。

6. **Python虚拟机（Python Virtual Machine, PVM）**\ ：

   -  **功能**\ ：解释和执行字节码。
   -  **工作原理**\ ：PVM逐条读取字节码指令，并将其转换为机器指令或直接执行相应的操作。

7. **运行时环境（Runtime Environment）**\ ：

   -  **功能**\ ：提供程序执行所需的基础设施，如内存管理、垃圾回收、标准库支持等。
   -  **特点**\ ：包括内存分配器、垃圾回收器、内置函数和对象模型等。

8. **标准库（Standard Library）**\ ：

   -  **功能**\ ：提供一组常用模块和包，支持文件操作、网络通信、数据处理等任务。
   -  **特点**\ ：丰富的模块集成在解释器中，直接可用。

4.2 Python解释器具体实现
~~~~~~~~~~~~~~~~~~~~~~~~

-  **Cpython**\ ：用C语言开发的，在命令行下运行Python就是启动Cpython解释器，官方下载的python2.7均为Cpython。Cpython用>>>作为提示符。
-  **Ipython**\ ：基于CPython之上的一个交互式解释器，也就是说，IPython只是在交互方式上有所增强，但是执行Python代码的功能和CPython是完全一样的。IPython用In
   [序号]:作为提示符。
-  **PyPy**\ ：主要针对执行速度。采用JIT技术，对Python代码进行动态编译。绝大部分Python代码都可以在PyPy下运行。
-  **Jpython**\ ：运行在Java平台上的Python解释器，可以直接把Python代码编译成Java字节码执行。
-  **IronPython**\ ：运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。
-  **Boost.Python**\ ：使得Python和C++的类库可互相调用（.pyc）。

以下是Python解释器种类的整理表格：

+---+----------------+----------------+----------------+------------+
| * | **简介**       | **特点**       | **优点**       | **缺点**   |
| * |                |                |                |            |
| 解 |               |                |                |            |
| 释 |               |                |                |            |
| 器 |               |                |                |            |
| * |                |                |                |            |
| * |                |                |                |            |
+===+================+================+================+============+
| * | 默认的、最常用 | 用C语言编写，  | 稳定           | 性能       |
| * | 的Python解释器 | 最广泛使用，兼 | ，支持大多数的 | 较低，主要 |
| C |                | 容性最好。官方 | Python库和模块 | 由于GIL（  |
| P |                | 下载的python均 |                | 全局解释器 |
| y |                | 为Cpython，用> |                | 锁）的限制 |
| t |                | >>作为提示符。 |                |            |
| h |                |                |                |            |
| o |                |                |                |            |
| n |                |                |                |            |
| * |                |                |                |            |
| * |                |                |                |            |
+---+----------------+----------------+----------------+------------+
| * | 基于C          | 提             | 非常           | 主要用     |
| * | Python之上的一 | 供强大的交互式 | 适合数据科学和 | 于交互式计 |
| I | 个交互式解释器 | shell，支持自  | 研究工作，提供 | 算，不适合 |
| P |                | 动补全、调试器 | 了更好的用户体 | 作为生产环 |
| y |                | 等。IPython只  | 验和丰富的功能 | 境的解释器 |
| t |                | 是在交互方式上 |                |            |
| h |                | 有所增强，但是 |                |            |
| o |                | 执行Python代码 |                |            |
| n |                | 的功能和CPyth  |                |            |
| * |                | on是完全一样的 |                |            |
| * |                | 。IPython用In  |                |            |
|   |                | [序号          |                |            |
|   |                | ]:作为提示符。 |                |            |
+---+----------------+----------------+----------------+------------+
| * | 采用JIT        | 比CPython更    | 显著提高性     | 与CPy      |
| * | （即时编译）技 | 快，特别是在长 | 能，特别适用于 | thon的兼容 |
| P | 术的Python解释 | 时间运行的程序 | 计算密集型任务 | 性不完全， |
| y | 器，对Python代 | 中。绝大部分Py |                | 某些库可能 |
| P | 码进行动态编译 | thon代码都可以 |                | 无法使用。 |
| y |                | 在PyPy下运行。 |                |            |
| * |                |                |                |            |
| * |                |                |                |            |
+---+----------------+----------------+----------------+------------+
| * | 运             | 可以直接调     | 与Ja           | 性能不     |
| * | 行在Java平台上 | 用Java库和类， | va无缝集成，适 | 如CPython  |
| J | 的Python解释器 | 可以直接把Pyth | 合需要在Java平 | ，更新较慢 |
| y |                | on代码编译成Ja | 台上运行的应用 |            |
| t |                | va字节码执行。 |                |            |
| h |                |                |                |            |
| o |                |                |                |            |
| n |                |                |                |            |
| * |                |                |                |            |
| * |                |                |                |            |
+---+----------------+----------------+----------------+------------+
| * | 运行在         | 可以直接调用.N | 与.N           | 与C        |
| * | 微软.NET平台上 | ET框架的类和库 | ET无缝集成，适 | Python的兼 |
| I | 的Python解释器 | ，可以直接把Py | 合需要在.NET平 | 容性不完全 |
| r |                | thon代码编译成 | 台上运行的应用 | ，某些库可 |
| o |                | .Net的字节码。 |                | 能无法使用 |
| n |                |                |                |            |
| P |                |                |                |            |
| y |                |                |                |            |
| t |                |                |                |            |
| h |                |                |                |            |
| o |                |                |                |            |
| n |                |                |                |            |
| * |                |                |                |            |
| * |                |                |                |            |
+---+----------------+----------------+----------------+------------+
| * | 用于微控制器   | 精简版的Py     | 体积小，适合嵌 | 功能       |
| * | 和资源受限环境 | thon解释器，适 | 入式开发和物联 | 受限，不支 |
| M | 的Python解释器 | 用于嵌入式系统 | 网（IoT）应用  | 持所有的Py |
| i |                |                |                | thon标准库 |
| c |                |                |                |            |
| r |                |                |                |            |
| o |                |                |                |            |
| P |                |                |                |            |
| y |                |                |                |            |
| t |                |                |                |            |
| h |                |                |                |            |
| o |                |                |                |            |
| n |                |                |                |            |
| * |                |                |                |            |
| * |                |                |                |            |
+---+----------------+----------------+----------------+------------+
| * | 采用JIT        | 与CPython完    | 提高性能，特别 | 仍在发展中 |
| * | 技术的Python解 | 全兼容，同时在 | 是在计算密集型 | ，稳定性和 |
| P | 释器，旨在提高 | 性能上有所提升 | 任务中。Pyston | 兼容性有待 |
| y | CPython的性能  |                | 是 Python      | 进一步验证 |
| s |                |                | 的基于 JIT     |            |
| t |                |                | 另一种实现，   |            |
| o |                |                | 更快且高度兼容 |            |
| n |                |                | C              |            |
| * |                |                | Python，和另一 |            |
| * |                |                | 个被寄予厚望的 |            |
|   |                |                | pypy           |            |
|   |                |                | 相比，Pyston   |            |
|   |                |                | 背后有 DropBox |            |
|   |                |                | 的资金         |            |
|   |                |                | 支持，发展会比 |            |
|   |                |                | PyPy 更快。    |            |
+---+----------------+----------------+----------------+------------+
| * | 用             | 允许在         | 适             | 需要掌     |
| * | 于将C++与Pyth  | C++中嵌入Pyth  | 合需要高性能计 | 握C++编程  |
| B | on无缝集成的库 | on解释器，或将 | 算的应用，充分 | ，有一定的 |
| o |                | C++类和函数暴  | 利用C++的性能  | 学习曲线， |
| o |                | 露给Python使用 | 优势，同时享受 | 复杂性较高 |
| s |                |                | Python的易用性 |            |
| t |                |                |                |            |
| . |                |                |                |            |
| P |                |                |                |            |
| y |                |                |                |            |
| t |                |                |                |            |
| h |                |                |                |            |
| o |                |                |                |            |
| n |                |                |                |            |
| * |                |                |                |            |
| * |                |                |                |            |
+---+----------------+----------------+----------------+------------+

4.3 Python虚拟机
~~~~~~~~~~~~~~~~

python并不将py文件编译为机器码来运行，而是由python虚拟机一条条地将py语句解释运行，python虚拟机的执行方式就是模仿普通x86可执行文件运行方式。

   **虚拟机输入为字节码.pyc文件，由字节码文件加载器将二进制的.pyc文件加载到内存，由执行引擎解释执行，输出为字节码文件的执行结果。**

4.4 Python字节码
~~~~~~~~~~~~~~~~

**Python字节码**\ （Python
Bytecode）是Python源代码编译后的中间表示形式。字节码是与特定硬件无关的低级表示，适合Python虚拟机（PVM）解释执行。字节码文件通常以\ ``.pyc``\ 扩展名存储。

-  **跨平台**\ ：字节码独立于具体的硬件和操作系统，可以在任何支持相应Python解释器的平台上运行。
-  **优化执行**\ ：通过将源代码编译为字节码，可以减少源代码解析的开销，提高执行效率。

当Python脚本首次运行时，解释器会将源代码（.py文件）编译为字节码，并将字节码存储在\ ``__pycache__``\ 目录下，以\ ``.pyc``\ 文件形式保存。之后运行相同脚本时，解释器会直接使用已有的字节码文件，除非源代码发生了变化。

   备注

   Python中的字节码(bytecode) 是一种数据类型，
   Python代码的编译结果就是bytecode对象。bytecode对象可以由虚拟机加载后直接运行，而pyc文件就是bytecode在硬盘上的保存形式。

4.5 Python源代码编译和执行的详细流程
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1. **源代码输入**\ ：

   -  Python解释器读取并加载Python源代码（.py文件）。

2. **词法分析（Lexical Analysis）**\ ：

   -  词法分析器将源代码转换为标记（token），这些标记是编程语言的基本组成部分。

3. **语法分析（Parsing）**\ ：

   -  语法分析器根据标记序列构建抽象语法树（AST），表示代码的结构和语法。

4. **语义分析（Semantic Analysis）**\ ：

   -  语义分析器检查AST的语义正确性，确保变量、类型和操作符的使用符合语言规则。

5. **字节码生成（Bytecode Generation）**\ ：

   -  编译器将AST转换为字节码，生成的字节码是跨平台的低级表示形式。

6. **存储字节码（Bytecode Storage）**\ ：

   -  编译后的字节码保存为\ ``.pyc``\ 文件，存储在\ ``__pycache__``\ 目录下，以便后续使用。

7. **字节码加载**\ ：

   -  当再次运行相同的Python脚本时，解释器首先检查是否存在对应的字节码文件（.pyc）。
   -  如果存在且未过期，直接加载字节码文件；否则，重新编译源代码生成新的字节码。

8. **执行字节码（Execution by PVM）**\ ：

   -  Python虚拟机（PVM）读取字节码文件，逐条解释和执行字节码指令。
   -  PVM负责内存管理、垃圾回收、动态类型检查和其他运行时任务。

以下是上述流程的图示：

.. figure::
   C:\Users\xsdwl\AppData\Roaming\Typora\typora-user-images\image-20240525222925851.png
   :alt: image-20240525222925851

   image-20240525222925851

.. code:: mermaid

   graph LR
       A[源代码（.py）] --> B[词法分析]
       B --> C[语法分析]
       C --> D[语义分析]
       D --> E[字节码生成]
       E --> F[存储字节码（.pyc）]
       F --> G[字节码加载]
       G --> H[字节码执行（PVM）]

5. Python的应用
---------------

+---------+-------------------+-------------------+-------------------+
| **应用  | **描述**          | **示例库和工具**  | **应用示例**      |
| 领域**  |                   |                   |                   |
+=========+===================+===================+===================+
| **We    | 创建动态          | Djang             | Django用于开发    |
| b开发** | 网站、处理HTTP请  | o、Flask、Pyramid | Instagram，Flask  |
|         | 求、数据库操作等  |                   | 用于开发Pinterest |
+---------+-------------------+-------------------+-------------------+
| **数    | 数据              | NumPy、Pandas、M  | 使用TensorFlow进  |
| 据科学  | 处理与分析、机器  | atplotlib、Scikit | 行图像识别，使用P |
| 与机器  | 学习模型训练与预  | -learn、TensorFlo | andas进行数据分析 |
| 学习**  | 测、数据可视化等  | w、Keras、PyTorch |                   |
+---------+-------------------+-------------------+-------------------+
| **网络  | 自动化            | Se                | 使用Sel           |
| 爬虫、  | 任务、网络爬虫、  | lenium、Beautiful | enium进行浏览器自 |
| 自动化  | 数据抓取、自动化  | Soup、Sc          | 动化测试，使用Scr |
| 与脚本  | 测试等。用于搜索  | rapy、pyautogui、 | apy进行网页数据抓 |
| 编写**  | 引擎、深度学习等  | requests、pytest  | 取,使用Beautiful  |
|         | 领域提供数据源。  |                   | Soup解析HTML内容  |
+---------+-------------------+-------------------+-------------------+
| **科学  | 科学计算、符号    | SciPy、SymPy、    | 使用SciPy进       |
| 计算与  | 数学、图像处理等  | OpenCV、Biopython | 行数值计算，使用O |
| 工程**  |                   |                   | penCV进行图像处理 |
+---------+-------------------+-------------------+-------------------+
| *       | 自然语言处理、    | NLTK、spaCy、     | 使用              |
| *人工智 | 文本分析、语音识  | GPT、Transformers | NLTK进行文本分类  |
| 能与自  | 别、聊天机器人等  |                   | ，使用Transformer |
| 然语言  |                   |                   | s进行语言模型训练 |
| 处理**  |                   |                   |                   |
+---------+-------------------+-------------------+-------------------+
| **数据  | NumPy扩展提供大量 | NumPy、Pan        | 使用NumPy进行数值 |
| 科学**  | 与许多标准数学库  | das、Matplotlib、 | 计算，使用scikit- |
|         | 的接口。机器学习  | seaborn、scikit-  | learn训练机器学习 |
|         | （scikit-learn、T | learn、TensorFlow | 模型，使用Matplot |
|         | ensorFlow框架）、 |                   | lib进行数据可视化 |
|         | 数据统计分析和可  |                   |                   |
|         | 视化（Matplotlib  |                   |                   |
|         | 、seaborn框架）。 |                   |                   |
+---------+-------------------+-------------------+-------------------+
| **游戏  | 2                 | Pygame、PyKyra    | 使用Pygam         |
| 开发**  | D游戏开发、图形渲 |                   | e开发简单的2D游戏 |
|         | 染、游戏逻辑控制  |                   |                   |
+---------+-------------------+-------------------+-------------------+
| **桌    | 使用PyQt、Kivy等  | PyQt、Kivy        | 使用PyQt开        |
| 面应用  | 框架进行图形用户  |                   | 发桌面应用，使用K |
| 开发**  | 界面程序的开发。  |                   | ivy开发跨平台应用 |
+---------+-------------------+-------------------+-------------------+
| *       | 编程教学的        | 无需特定库        | 很多学            |
| *教育与 | 入门语言，广泛用  |                   | 校和在线课程使用P |
| 教学**  | 于计算机科学教育  |                   | ython作为教学语言 |
+---------+-------------------+-------------------+-------------------+
| **金融  | 金融              | QuantLib、Zip     | 使用Zipline开     |
| 与量化  | 数据分析、量化交  | line、PyAlgoTrade | 发和回测交易策略  |
| 交易**  | 易策略开发、回测  |                   |                   |
+---------+-------------------+-------------------+-------------------+
| **网络  | 自动化            | Ansible、         | 使                |
| 与系统  | 配置管理、远程命  | SaltStack、Fabric | 用Ansible进行大规 |
| 运维**  | 令执行、系统监控  |                   | 模服务器配置管理  |
+---------+-------------------+-------------------+-------------------+
| *       | 开发区            | We                | 使用Web3.py与以太 |
| *区块链 | 块链应用、智能合  | b3.py、pyethereum | 坊区块链进行交互  |
| 与加密  | 约、加密货币交易  |                   |                   |
| 货币**  |                   |                   |                   |
+---------+-------------------+-------------------+-------------------+
| **物    | 开发嵌入式        | MicroPyth         | 使用MicroPython开 |
| 联网（  | 系统和物联网设备  | on、CircuitPython | 发小型物联网设备  |
| IoT）** |                   |                   |                   |
+---------+-------------------+-------------------+-------------------+
| **网络  | 渗透测试、网络    | Scapy、P          | 使用Scapy进行网   |
| 安全**  | 分析、加密解密等  | aramiko、PyCrypto | 络包分析，使用PyC |
|         |                   |                   | rypto进行数据加密 |
+---------+-------------------+-------------------+-------------------+
| **Li    | 提供              | os、s             | 使用os模          |
| nux/UNI | API（Application  | hutil、subprocess | 块进行文件系统操  |
| X运维** | Programming       |                   | 作，使用subproces |
|         | Interf            |                   | s模块执行系统命令 |
|         | ace应用程序编程接 |                   |                   |
|         | 口），能方便进行  |                   |                   |
|         | 系统维护和管理。  |                   |                   |
+---------+-------------------+-------------------+-------------------+
| *       | 使用PyQt、        | PyQt、Kivy、      | 使用Kivy开        |
| *移动Ap | Kivy等进行移动应  | PyOpenGL、PyGame  | 发跨平台移动应用  |
| p开发** | 用开发。Python的P |                   | ，使用PyOpenGL进  |
|         | yOpenGL模块封装了 |                   | 行图形处理，使用P |
|         | OpenGL应用程序编  |                   | yGame开发移动游戏 |
|         | 程接口，能进行二  |                   |                   |
|         | 维和三维图像处理  |                   |                   |
|         | 。PyGame模块可用  |                   |                   |
|         | 于编写游戏软件。  |                   |                   |
+---------+-------------------+-------------------+-------------------+
| **网络  | 基于S             | socket、          | 使用              |
| 编程**  | ocket等协议，提供 | asyncio、Twisted  | socket模块开发聊  |
|         | 丰富的模块支持so  |                   | 天程序，使用Twis  |
|         | ckets编程，能方便 |                   | ted开发分布式应用 |
|         | 快速地开发分布式  |                   |                   |
|         | 应用程序。许多大  |                   |                   |
|         | 规模软件开发计划  |                   |                   |
|         | 如Zope，Mnet及Bit |                   |                   |
|         | Torrent，Google都 |                   |                   |
|         | 在广泛地使用它。  |                   |                   |
+---------+-------------------+-------------------+-------------------+
| **图形  | 有PIL、Tkinter等  | PIL               | 使用Pillow进行    |
| 处理**  | 图形库支持，能方  | 、Pillow、Tkinter | 图像处理，使用Tk  |
|         | 便进行图形处理。  |                   | inter开发图形界面 |
+---------+-------------------+-------------------+-------------------+
| **文本  | 提供re模          | re                | 使用re模块        |
| 处理**  | 块支持正则表达式  | 、xml.etree.Eleme | 进行文本搜索，使  |
|         | ，还提供SGML、XM  | ntTree、Beautiful | 用xml.etree.Eleme |
|         | L分析模块，许多程 | Soup              | ntTree解析XML文档 |
|         | 序员利用Python进  |                   |                   |
|         | 行XML程序的开发。 |                   |                   |
+---------+-------------------+-------------------+-------------------+
| *       | 可通过遵循Python  | sqli              | 使用              |
| *数据库 | DB-API规范        | te3、SQLAlchemy、 | sqlite3操作SQLit  |
| 编程**  | 的模块与Microsoft | psycopg2、PyMySQL | e数据库，使用SQLA |
|         | SQL               |                   | lchemy进行ORM映射 |
|         | Server，          |                   |                   |
|         | Oracle，Sybase，  |                   |                   |
|         | DB2，MySQL、SQLit |                   |                   |
|         | e等数据库通信。Py |                   |                   |
|         | thon自带有一个Gad |                   |                   |
|         | fly模块，提供了一 |                   |                   |
|         | 个完整的SQL环境。 |                   |                   |
+---------+-------------------+-------------------+-------------------+

**python应用举例：**

-  Google - 谷歌在很多项目中用python作为网络应用的后端，如Google
   Groups、Gmail、Google Maps等
-  NASA - 美国宇航局，从1994年起把python作为主要开发语言
-  豆瓣网 - 图书、唱片、电影等文化产品的资料数据库网站
-  Torchlight –Python编写的大型3D游戏，原Blizzard公司人员制作发行，开源
-  Blender - 以C与Python开发的开源3D绘图软件
   在科学研究中也得到广泛的应用
